<!doctype html>
<html lang="en">
<head>
    <title>SiwE Example</title>
    <link rel="stylesheet" href="css/siwe.css"/>
    <script type="module">
        import {prepareMessage} from 'https://cdn.jsdelivr.net/npm/simple-siwe@0.1.4/+esm'

        function error(msg) {
            document.querySelector("#error").innerText = msg;
        }

        async function getEthAccount() {
            // Find our Ethereum accounts.
            const accounts = await ethereum.request({method: 'eth_requestAccounts'});
            if (!accounts.length) {
                error("No accounts found!");
                return;
            }

            // The first account is the one currently selected in MetaMask.
            return accounts[0];
        }

        async function siweLogin() {
            const {ethereum} = window;
            if (!ethereum) {
                error("Please install MetaMask!");
                return;
            }

            // Get the current, connected account.
            const account = await getEthAccount();

            // Get csrf to make Auth.js happy
            const {csrfToken} = await fetch("/siwe/auth/csrf").then(res => res.json());

            // Get nonce to make us happy
            const {nonce} = await fetch("/siwe/nonce").then(res => res.json());

            // Prepare the message
            const rawMessage = {
                domain: window.location.host,
                address: account,
                statement: 'This message is used to sign in to siwe-express-example',
                uri: window.location.origin,
                version: '1.0',
                chainId: ethereum.networkVersion,
                nonce: nonce,
                issuedAt: new Date().toISOString()
            };

            // Sign the message
            const message = prepareMessage(rawMessage);
            const signature = await ethereum.request({
                method: 'personal_sign',
                params: [message, account]
            });

            // Send the signed message to the server
            const result = await fetch("/siwe/auth/callback/credentials", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    csrfToken,
                    message,
                    signature
                })
            });

            if (result.status !== 200 || result.url.indexOf("/error") >= 0) {
                // Show a specific error page if we were told about it, else generic.
                window.location = (result.url.indexOf("/error") >= 0) ? result.url : "/error";
            } else {
                // Reload the current page
                window.location.reload();
            }
        }

        async function siweLogout() {
            // Get csrf to make Auth.js happy
            const {csrfToken} = await fetch("/siwe/auth/csrf").then(res => res.json());

            // Sign out
            const result = await fetch("/siwe/auth/signout", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({csrfToken})
                }
            );

            if (result.status !== 200 || result.url.indexOf("/error") >= 0) {
                // Show a specific error page if we were told about it, else generic.
                window.location = (result.url.indexOf("/error") >= 0) ? result.url : "/error";
            } else {
                // Reload the current page
                window.location.reload();
            }
        }

        // These functions are used to whitelist and fund the address.  They are purely to make the demo
        // easier to use.  In any real application you would not want to do this, as they are completely insecure.
        function displaySpinner() {
            // Show the spinner overlay
            const overlay = document.getElementById("spinner-overlay");
            overlay.style.display = "flex";
        }

        function removeSpinner() {
            const overlay = document.getElementById("spinner-overlay");
            overlay.style.display = "none";
        }

        async function whitelistAddress(event) {
            try {
                displaySpinner();
                document.querySelector("#whitelist").disabled = true;
                const address = await getEthAccount();
                const result = await fetch("/faucet/whitelist", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({address})
                });
                if (result.status !== 200) {
                    throw new Error(await result.text());
                }
                document.querySelector("#whitelist").remove()
            } catch (err) {
                error("An error occurred while whitelisting the address: " + err.message);
            } finally {
                removeSpinner();
            }
        }

        async function blacklistAddress() {
            try {
                displaySpinner();
                document.querySelector("#blacklist").disabled = true;
                const address = await getEthAccount();
                const result = await fetch("/faucet/blacklist", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({address})
                });
                if (result.status !== 200) {
                    throw new Error(await result.text());
                }
                await siweLogout();
            } catch (err) {
                error("An error occurred blacklisting account: " + err.message);
            } finally {
                removeSpinner();
            }
        }

        async function faucet() {
            try {
                displaySpinner();
                document.querySelector("#faucet").disabled = true;
                const address = await getEthAccount();
                const result = await fetch("/faucet/fund", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({address})
                });
                if (result.status !== 200) {
                    throw new Error(await result.text());
                }
                document.querySelector("#faucet").remove();
            } catch (err) {
                error("An error occurred sending funds: " + err.message);
            } finally {
                removeSpinner();
            }
        }

        // Attach event listeners to buttons.
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelector('#login')?.addEventListener("click", siweLogin);
            document.querySelector('#logout')?.addEventListener("click", siweLogout);
            document.querySelector('#whitelist')?.addEventListener("click", whitelistAddress);
            document.querySelector('#blacklist')?.addEventListener("click", blacklistAddress);
            document.querySelector('#faucet')?.addEventListener("click", faucet);
        });
    </script>
</head>
<body>
<div id="spinner-overlay" style="display: none;">
    <div class="spinner"></div>
    <p>Please wait until the transaction has been confirmed...</p>
</div>
<div class="container">
    <img style="width: 100%" src="images/Gemini_Generated_Image_6pqg396pqg396pqg.png"/>
    <% if (user) { %>
        <p class="user">The current user is: <%= user %></p>
        <button id="logout" class="major">Sign-out</button>
        <div class="button-group">
            <% if (whitelistRequired) { %>
                <button id="blacklist" class="small">Blacklist Account</button>
            <% } %>
        </div>
    <% } else { %>
        <button id="login" class="major">Sign-in with Ethereum</button>
        <div class="button-group">
            <% if (whitelistRequired) { %>
                <button id="whitelist" class="small">Whitelist Account</button>
            <% } %>
            <% if (minimumBalanceRequired) { %>
                <button id="faucet" class="small">Fund Account</button>
            <% } %>
        </div>
    <% } %>
    <h2 id="error" class="error"></h2>
    <div class="footer">
        <a href="https://eips.ethereum.org/EIPS/eip-4361">EIP-4361</a>
    </div>
    <img src="images/bpi.png" class="corner-logo bottom-left" alt="BPI Logo" />
    <img src="images/stack.png" class="corner-logo bottom-right" alt="Stack Logo" />
</div>
</body>
</html>