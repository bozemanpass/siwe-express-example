<!doctype html>
<html lang="en">
<head>
    <title>SiwE Example</title>
    <script type="module">
        import {prepareMessage} from 'https://cdn.jsdelivr.net/npm/simple-siwe@0.1.4/+esm'

        function error(msg) {
            document.querySelector("#error").innerText = msg;
        }

        async function getEthAccount() {
            // Find our Ethereum accounts.
            const accounts = await ethereum.request({method: 'eth_requestAccounts'});
            if (!accounts.length) {
                error("No accounts found!");
                return;
            }

            // The first account is the one currently selected in MetaMask.
            return accounts[0];
        }

        async function siweLogin() {
            const {ethereum} = window;
            if (!ethereum) {
                error("Please install MetaMask!");
                return;
            }

            // Get the current, connected account.
            const account = await getEthAccount();

            // Get csrf to make Auth.js happy
            const {csrfToken} = await fetch("/siwe/auth/csrf").then(res => res.json());

            // Get nonce to make us happy
            const {nonce} = await fetch("/siwe/nonce").then(res => res.json());

            // Prepare the message
            const rawMessage = {
                domain: window.location.host,
                address: account,
                statement: 'This message is used to sign in to siwe-express-example',
                uri: window.location.origin,
                version: '1.0',
                chainId: ethereum.networkVersion,
                nonce: nonce,
                issuedAt: new Date().toISOString()
            };

            // Sign the message
            const message = prepareMessage(rawMessage);
            const signature = await ethereum.request({
                method: 'personal_sign',
                params: [message, account]
            });

            // Send the signed message to the server
            const result = await fetch("/siwe/auth/callback/credentials", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    csrfToken,
                    message,
                    signature
                })
            });

            if (result.status !== 200) {
                // Show a specific error page if we were told about it, else generic.
                window.location = (result.url.indexOf("/siwe/auth/error") >= 0) ? result.url : "/siwe/auth/error";
            } else if (result.url.indexOf("error=CredentialsSignin") >= 0) {
                // When authorize() returns null the status can still be 200, but for our purposes it is still an error.
                window.location = "/siwe/auth/error";
            } else {
                // Reload the current page
                window.location.reload();
            }
        }

        async function siweLogout() {
            // Get csrf to make Auth.js happy
            const {csrfToken} = await fetch("/siwe/auth/csrf").then(res => res.json());

            // Sign out
            const result = await fetch("/siwe/auth/signout", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({csrfToken})
                }
            );

            if (result.status !== 200) {
                // Show a specific error page if we were told about it, else generic.
                window.location = (result.url.indexOf("/siwe/auth/error") >= 0) ? result.url : "/siwe/auth/error";
            } else {
                // Reload the current page
                window.location.reload();
            }
        }

        // These functions are used to whitelist and fund the address.  They are purely to make the demo
        // easier to use.  In any real application you would not want to do this, as they are completely insecure.
        async function whitelistAddress(event) {
            document.querySelector("#whitelist").disabled = true;
            const address = await getEthAccount();
            await fetch("/faucet/whitelist", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({address})
            });
            document.querySelector("#whitelist").remove()
        }

        async function blacklistAddress() {
            document.querySelector("#blacklist").disabled = true;
            const address = await getEthAccount();
            await fetch("/faucet/blacklist", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({address})
            });
            await siweLogout();
        }

        async function faucet() {
            document.querySelector("#faucet").disabled = true;
            const address = await getEthAccount();
            await fetch("/faucet/fund", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({address})
            });
            document.querySelector("#faucet").remove();
        }

        // Attach event listeners to buttons.
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelector('#login')?.addEventListener("click", siweLogin);
            document.querySelector('#logout')?.addEventListener("click", siweLogout);
            document.querySelector('#whitelist')?.addEventListener("click", whitelistAddress);
            document.querySelector('#blacklist')?.addEventListener("click", blacklistAddress);
            document.querySelector('#faucet')?.addEventListener("click", faucet);
        });
    </script>
    <style>
        body {
            font-family: Rajdhani, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #ffffff; /* White background */
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .container {
            text-align: center;
            background: #000000; /* Grey/blue background for the box */
            border-radius: 15px; /* Rounded edges */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding-top: 15px;
            padding-bottom: 15px;
            min-height: 420px;
            width: 700px;
        }

        button {
            background-color: #000000; /* Medium blue/gray for buttons */
            color: #edf2f7; /* Light text color */
            border: white 2px solid;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 0;
            cursor: pointer;
            margin: 10px auto; /* Center the button */
            transition: background-color 0.3s ease;
            display: block; /* Ensure buttons are on their own row */
            width: 100%; /* Full width for larger buttons */
            max-width: 230px; /* Limit the width */
            text-align: center;
            font-variant: all-petite-caps;
        }

        button.major {
            height: 3.5em;
        }

        button.small {
            border: white 1px solid;
            font-size: 0.9rem; /* Smaller font size for smaller buttons */
            padding: 8px 16px;
            max-width: 170px; /* Smaller width for smaller buttons */
        }

        button:hover {
            transform: scale(1.1); /* Grow the button by 10% */
            transition: transform 0.2s ease, background-color 0.3s ease; /* Smooth transition */
        }

        button:disabled {
            color: #a0aec0; /* Muted gray for disabled buttons */
            border-color: #a0aec0;
            cursor: not-allowed;
        }

        .button-group {
            display: flex;
            justify-content: center; /* Center the group */
            gap: 10px; /* Space between buttons */
        }

        a {
            color: #a0aec0; /* Light blue for links */
        }

        #error {
            font-size: 1rem;
            margin-bottom: 20px;
            text-align: center;
            color: #e53e3e; /* Red for error messages */
        }

        .user {
            color: white;
        }

        .footer {
            margin-top: 1em;
        }
    </style>
</head>
<body>
<div class="container">
    <img style="width: 100%" src="images/Gemini_Generated_Image_6pqg396pqg396pqg.png"/>
    <% if (user) { %>
        <p class="user">The current user is: <%= user %></p>
        <button id="logout" class="major">Sign-out</button>
        <div class="button-group">
            <button id="blacklist" class="small">Blacklist Address</button>
        </div>
    <% } else { %>
        <button id="login" class="major">Sign-in with Ethereum</button>
        <div class="button-group">
            <button id="whitelist" class="small">Whitelist Address</button>
            <button id="faucet" class="small">Fund Address</button>
        </div>
    <% } %>
    <h2 id="error" class="error"></h2>
    <div class="footer">
        <a href="https://eips.ethereum.org/EIPS/eip-4361">EIP-4361</a>
    </div>
</div>
</body>
</html>